{"version":3,"file":"static/js/186.3308174c.chunk.js","mappings":"kOAgDA,UA3CgB,WACZ,OAA8BA,EAAAA,EAAAA,UAAS,IAAvC,eAAOC,EAAP,KAAgBC,EAAhB,KACA,GAA0BF,EAAAA,EAAAA,UAAS,MAAnC,eAAOG,EAAP,KAAcC,EAAd,KACA,GAA8BJ,EAAAA,EAAAA,WAAS,GAAvC,eAAOK,EAAP,KAAgBC,EAAhB,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,QAiBR,OAfFE,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAU,mCAAG,oGAEfJ,GAAW,GAFI,UAGQK,EAAAA,EAAAA,IAAgBJ,GAHxB,OAGTK,EAHS,OAIfV,EAAWU,EAASC,SAJL,gDAMfT,EAAS,KAAMU,SANA,yBAQfR,GAAW,GARI,4EAAH,qDAWhBI,GACD,GAAE,CAACH,KAGF,gCACKF,IAAW,SAAC,IAAD,IAEXF,IAAUE,IAAW,yBAAG,UAAQF,MAEjC,wBACGF,EAAQc,OAAS,EAChBd,EAAQe,KAAI,gBAAGC,EAAH,EAAGA,OAAQC,EAAX,EAAWA,QAASC,EAApB,EAAoBA,GAApB,OACV,2BACE,0BAAI,WAASF,MACb,uBAAIC,MAFGC,EADC,KAOV,uBAAG,oCAKhB,C,+LC5CKC,EAAW,gCAGjBC,EAAAA,EAAAA,SAAAA,OAAwB,CACtBC,QAHc,oCAMT,IAAMC,EAAiB,mCAAG,oGACRF,EAAAA,EAAAA,IAAA,UAClBD,EADkB,wBADQ,cACzBR,EADyB,yBAIxBA,EAASY,MAJe,2CAAH,qDAOjBC,EAAc,mCAAG,WAAMC,GAAN,uFACLL,EAAAA,EAAAA,IAAA,UAClBD,EADkB,8BACYM,IAFP,cACtBd,EADsB,yBAIrBA,EAASY,MAJY,2CAAH,sDAOdG,EAAe,mCAAG,WAAMR,GAAN,uFACNE,EAAAA,EAAAA,IAAA,UAClBD,EADkB,iBACDD,IAFO,cACvBP,EADuB,yBAItBA,EAASY,MAJa,2CAAH,sDAOfI,EAAY,mCAAG,WAAMT,GAAN,uFACHE,EAAAA,EAAAA,IAAA,UAClBD,EADkB,iBACDD,EADC,aADG,cACpBP,EADoB,yBAInBA,EAASY,MAJU,2CAAH,sDAOZb,EAAe,mCAAG,WAAMQ,GAAN,uFACNE,EAAAA,EAAAA,IAAA,UAClBD,EADkB,iBACDD,EADC,aADM,cACvBP,EADuB,yBAItBA,EAASY,MAJa,2CAAH,qD","sources":["components/Reviews/Reviews.jsx","services/API.js"],"sourcesContent":["import { Loader } from \"components/Loader/Loader\";\nimport { useEffect, useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { getMovieReviews } from \"services/API\";\n\nconst Reviews = () => {\n    const [reviews, setReviews] = useState([]);\n    const [error, setError] = useState(null);\n    const [loading, setLoading] = useState(false);\n    const { movieId } = useParams();\n    \n  useEffect(() => {\n    const getReviews = async () => {\n      try {\n        setLoading(true);\n        const response = await getMovieReviews(movieId);\n        setReviews(response.results);\n      } catch (error) {\n        setError(error.message);\n      } finally {\n        setLoading(false);\n      }\n    };\n    getReviews();\n  }, [movieId]);\n    \n    return (\n    <>\n        {loading && <Loader />}\n        \n        {error && !loading && <p>Error: {error}</p>}\n    \n        <ul>\n          {reviews.length > 0 ? (\n            reviews.map(({ author, content, id }) => (\n              <li key={id}>\n                <h4>Author: {author}</h4>\n                <p>{content}</p>\n              </li>\n            ))\n          ) : (\n              <p>This movie has no reviews:(</p>\n          )}\n        </ul>\n    </>\n  );\n}\n\nexport default Reviews;","import axios from 'axios';\n\nconst BASE_URL = 'https://api.themoviedb.org/3/';\nconst API_KEY = '10e9185665d086f70239d7bfb45d8306';\n\naxios.defaults.params = {\n  api_key: API_KEY,\n};\n\nexport const getTrendingMovies = async () => {\n  const response = await axios.get(\n    `${BASE_URL}trending/movie/day?`\n  );\n  return response.data;\n};\n\nexport const getMovieByName = async movieName => {\n  const response = await axios.get(\n    `${BASE_URL}search/movie?query=${movieName}`\n  );\n  return response.data;\n};\n\nexport const getMovieDetails = async id => {\n  const response = await axios.get(\n    `${BASE_URL}movie/${id}`\n  );\n  return response.data;\n};\n\nexport const getMovieCast = async id => {\n  const response = await axios.get(\n    `${BASE_URL}movie/${id}/credits`\n  );\n  return response.data;\n};\n\nexport const getMovieReviews = async id => {\n  const response = await axios.get(\n    `${BASE_URL}movie/${id}/reviews`\n  );\n  return response.data;\n};"],"names":["useState","reviews","setReviews","error","setError","loading","setLoading","movieId","useParams","useEffect","getReviews","getMovieReviews","response","results","message","length","map","author","content","id","BASE_URL","axios","api_key","getTrendingMovies","data","getMovieByName","movieName","getMovieDetails","getMovieCast"],"sourceRoot":""}